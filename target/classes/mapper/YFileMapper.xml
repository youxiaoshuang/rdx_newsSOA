<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.rdx.newsSOA.dao.YFileMapper" >
  <!--<cache type="com.rdx.Cache.RedisCache"/>-->
  <resultMap id="BaseResultMap" type="com.rdx.newsSOA.entity.YFile" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="key" property="key" jdbcType="VARCHAR" />
    <result column="originalName" property="originalname" jdbcType="VARCHAR" />
    <result column="newName" property="newname" jdbcType="VARCHAR" />
    <result column="fileType" property="filetype" jdbcType="VARCHAR" />
    <result column="size" property="size" jdbcType="BIGINT" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="serverPath" property="serverpath" jdbcType="VARCHAR" />
    <result column="docId" property="docid" jdbcType="INTEGER" />
    <result column="isLocalFile" property="isLocalFile" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, `key`, originalName, newName, fileType, `size`, url, serverPath, docId
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.rdx.newsSOA.entity.YFileExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from y_file
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from y_file
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from y_file
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.rdx.newsSOA.entity.YFileExample" >
    delete from y_file
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.rdx.newsSOA.entity.YFile" >
    insert into y_file (id, `key`, originalName,
      newName, fileType, size, 
      url, serverPath, docId,isLocalFile
      )
    values (#{id,jdbcType=INTEGER}, #{key,jdbcType=VARCHAR}, #{originalname,jdbcType=VARCHAR}, 
      #{newname,jdbcType=VARCHAR}, #{filetype,jdbcType=VARCHAR}, #{size,jdbcType=BIGINT}, 
      #{url,jdbcType=VARCHAR}, #{serverpath,jdbcType=VARCHAR}, #{docid,jdbcType=INTEGER}, #{isLocalFile,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.rdx.newsSOA.entity.YFile" useGeneratedKeys="true" keyProperty="id">
    insert into y_file
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="key != null" >
        `key`,
      </if>
      <if test="originalname != null" >
        originalName,
      </if>
      <if test="newname != null" >
        newName,
      </if>
      <if test="filetype != null" >
        fileType,
      </if>
      <if test="size != null" >
        size,
      </if>
      <if test="url != null" >
        url,
      </if>
      <if test="serverpath != null" >
        serverPath,
      </if>
      <if test="docid != null" >
        docId,
      </if>
      <if test="isLocalFile != null" >
        isLocalFile,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="key != null" >
        #{key,jdbcType=VARCHAR},
      </if>
      <if test="originalname != null" >
        #{originalname,jdbcType=VARCHAR},
      </if>
      <if test="newname != null" >
        #{newname,jdbcType=VARCHAR},
      </if>
      <if test="filetype != null" >
        #{filetype,jdbcType=VARCHAR},
      </if>
      <if test="size != null" >
        #{size,jdbcType=BIGINT},
      </if>
      <if test="url != null" >
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="serverpath != null" >
        #{serverpath,jdbcType=VARCHAR},
      </if>
      <if test="docid != null" >
        #{docid,jdbcType=INTEGER},
      </if>
      <if test="isLocalFile != null" >
        #{isLocalFile,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.rdx.newsSOA.entity.YFileExample" resultType="java.lang.Integer" >
    select count(*) from y_file
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
    <select id="selectByKey" resultType="com.rdx.newsSOA.entity.YFile">
      select
      <include refid="Base_Column_List" />
      from y_file
      where `key` = #{key,jdbcType=VARCHAR}
    </select>
    <select id="selectByDocId" resultType="com.rdx.newsSOA.entity.YFile">
      select
      <include refid="Base_Column_List" />
      from y_file
      where  docId = #{docId,jdbcType=INTEGER} limit 3
    </select>
    <update id="updateByExampleSelective" parameterType="map" >
    update y_file
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.key != null" >
        `key` = #{record.key,jdbcType=VARCHAR},
      </if>
      <if test="record.originalname != null" >
        originalName = #{record.originalname,jdbcType=VARCHAR},
      </if>
      <if test="record.newname != null" >
        newName = #{record.newname,jdbcType=VARCHAR},
      </if>
      <if test="record.filetype != null" >
        fileType = #{record.filetype,jdbcType=VARCHAR},
      </if>
      <if test="record.size != null" >
        size = #{record.size,jdbcType=BIGINT},
      </if>
      <if test="record.url != null" >
        url = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.serverpath != null" >
        serverPath = #{record.serverpath,jdbcType=VARCHAR},
      </if>
      <if test="record.docid != null" >
        docId = #{record.docid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update y_file
    set id = #{record.id,jdbcType=INTEGER},
      `key` = #{record.key,jdbcType=VARCHAR},
      originalName = #{record.originalname,jdbcType=VARCHAR},
      newName = #{record.newname,jdbcType=VARCHAR},
      fileType = #{record.filetype,jdbcType=VARCHAR},
      size = #{record.size,jdbcType=BIGINT},
      url = #{record.url,jdbcType=VARCHAR},
      serverPath = #{record.serverpath,jdbcType=VARCHAR},
      docId = #{record.docid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.rdx.newsSOA.entity.YFile" >
    update y_file
    <set >
      <if test="key != null" >
        `key` = #{key,jdbcType=VARCHAR},
      </if>
      <if test="originalname != null" >
        originalName = #{originalname,jdbcType=VARCHAR},
      </if>
      <if test="newname != null" >
        newName = #{newname,jdbcType=VARCHAR},
      </if>
      <if test="filetype != null" >
        fileType = #{filetype,jdbcType=VARCHAR},
      </if>
      <if test="size != null" >
        size = #{size,jdbcType=BIGINT},
      </if>
      <if test="url != null" >
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="serverpath != null" >
        serverPath = #{serverpath,jdbcType=VARCHAR},
      </if>
      <if test="docid != null" >
        docId = #{docid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.rdx.newsSOA.entity.YFile" >
    update y_file
    set `key` = #{key,jdbcType=VARCHAR},
      originalName = #{originalname,jdbcType=VARCHAR},
      newName = #{newname,jdbcType=VARCHAR},
      fileType = #{filetype,jdbcType=VARCHAR},
      size = #{size,jdbcType=BIGINT},
      url = #{url,jdbcType=VARCHAR},
      serverPath = #{serverpath,jdbcType=VARCHAR},
      docId = #{docid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>